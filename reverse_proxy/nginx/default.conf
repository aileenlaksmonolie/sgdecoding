upstream frontend {
	server frontend:3000;
}

upstream backend {
	server backend:2000;
}
server{
	if ($host = sgdecoding.speechlab.sg) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


        listen 80;
        listen [::]:80;

        server_name sgdecoding.speechlab.sg;                                                          nectivity on endpoint ntu-admin_re
    return 404; # managed by Certbot 
}
server{

	listen [::]:443 ssl ipv6only=on; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/sgdecoding.speechlab.sg/fullchain.pem; # managed by Certbot nectivity on endpoint ntu-admin_re
    ssl_certificate_key /etc/letsencrypt/live/sgdecoding.speechlab.sg/privkey.pem; # managed by Certb>roxy: listen tcp4 0.0.0.0:80: bind    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

 	server_name 20.24.14.170 sgdecoding.speechlab.sg;

	location / {
		proxy_pass http://frontend;
	}

	location /sockjs-node{
		proxy_pass http://frontend;
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "Upgrade";
	}

	location /api {
			rewrite /api/(.*) /$1 break;
			proxy_pass http://backend/;
	}
}
server{

	listen [::]:443 ssl ipv6only=on; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/sgdecoding.speechlab.sg/fullchain.pem; # managed by Certbot nectivity on endpoint ntu-admin_re
    ssl_certificate_key /etc/letsencrypt/live/sgdecoding.speechlab.sg/privkey.pem; # managed by Certb>roxy: listen tcp4 0.0.0.0:80: bind    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

 	server_name 20.24.14.170 sgdecoding.speechlab.sg;

	location / {
		proxy_pass http://frontend;
	}

	location /sockjs-node{
		proxy_pass http://frontend;
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "Upgrade";
	}

	location /api {
			rewrite /api/(.*) /$1 break;
			proxy_pass http://backend/;
	}
}

